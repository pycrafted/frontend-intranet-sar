import { NextRequest, NextResponse } from 'next/server'

// Charger explicitement les variables d'environnement
const CLAUDE_API_KEY = process.env.NEXT_PUBLIC_CLAUDE_API_KEY || process.env.CLAUDE_API_KEY
const CLAUDE_API_URL = "https://api.anthropic.com/v1/messages"

// Debug: V√©rifier que la cl√© API est charg√©e
console.log('üîë [CHAT API] Cl√© API Claude charg√©e:', CLAUDE_API_KEY ? 'Oui' : 'Non')
console.log('üîë [CHAT API] Longueur de la cl√©:', CLAUDE_API_KEY?.length || 0)
console.log('üîë [CHAT API] Variables d\'env disponibles:', Object.keys(process.env).filter(key => key.includes('CLAUDE')))

export async function POST(request: NextRequest) {
  try {
    const { message, conversationHistory = [], maiContext } = await request.json()

    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Message requis' },
        { status: 400 }
      )
    }

    // Construire l'historique de conversation
    const messages = [
       {
         role: "assistant",
         content: "Bonjour ! Je suis MA√è, votre assistant virtuel de la SAR. Comment puis-je vous aider ?"
       },
      ...conversationHistory,
      {
        role: "user",
        content: message
      }
    ]

    // Construire le prompt syst√®me avec le contexte MAI
    let systemPrompt = `Tu es MA√è, l'assistant virtuel sp√©cialis√© de la Soci√©t√© Africaine de Raffinage (SAR). Tu es un expert exclusif sur la SAR et tu ne r√©ponds qu'aux questions concernant cette entreprise bas√©es sur notre dataset officiel.

R√àGLES STRICTES DE R√âPONSE :
- Tu r√©ponds UNIQUEMENT aux questions sur la SAR bas√©es sur le dataset officiel
- Tu r√©ponds TOUJOURS de mani√®re directe et affirmative
- Tu N'UTILISES JAMAIS ces expressions : "selon les informations", "d'apr√®s ce que je vois", "il semble que", "d'apr√®s le contexte", "selon le contexte", "le contexte indique que", "d'apr√®s les informations fournies"
- Tu commences tes r√©ponses directement par la r√©ponse factuelle
- Tu affirmes tes r√©ponses avec confiance et autorit√©
- Tu √©vites toute forme d'h√©sitation ou de doute
- Si tu ne trouves pas la r√©ponse dans le dataset, dis UNIQUEMENT "Je n'ai pas cette information"
- TU N'INVENTES JAMAIS de r√©ponses - m√™me pour des questions g√©n√©rales comme 1+1
- TU NE DONNES JAMAIS de r√©ponses qui ne sont pas dans le dataset SAR

Caract√©ristiques professionnelles de MAI :
- Tu maintiens un niveau de formalit√© et de professionnalisme √©lev√©
- Tu utilises un langage technique pr√©cis et structur√©
- Tu r√©ponds exclusivement en fran√ßais avec un vocabulaire d'entreprise
- Tu es sp√©cialis√© dans l'assistance aux processus m√©tier et aux proc√©dures internes
- Tu fournis des informations factuelles, pr√©cises et v√©rifiables
- Tu utilises un ton formel, respectueux et distant
- Tu √©vites les familiarit√©s et les expressions trop famili√®res
- Tu structures tes r√©ponses de mani√®re claire et m√©thodique
- Tu privil√©gies la concision et la pertinence
- Tu respectes la hi√©rarchie et les protocoles d'entreprise

Contexte organisationnel : Tu es l'assistant sp√©cialis√© de la Soci√©t√© Africaine de Raffinage (SAR), int√©gr√© dans notre plateforme intranet. Tu ne r√©ponds qu'aux questions concernant la SAR bas√©es sur notre dataset officiel de 403 questions-r√©ponses.`

    // Ajouter le contexte MAI si disponible
    if (maiContext && maiContext.success && maiContext.context) {
      systemPrompt += `\n\nContexte sp√©cifique de la SAR :
${maiContext.context}

IMPORTANT : Utilise ce contexte pour fournir des r√©ponses pr√©cises et pertinentes sur la SAR. R√©ponds de mani√®re directe et affirmative en utilisant les informations du contexte. COMMENCE DIRECTEMENT par la r√©ponse factuelle sans aucune expression h√©sitante. Si le contexte ne contient pas d'informations pertinentes, dis UNIQUEMENT "Je n'ai pas cette information". N'INVENTE JAMAIS de r√©ponses.`
    }

    // Si aucun contexte MAI n'est fourni, ajouter une instruction sp√©ciale
    if (!maiContext || !maiContext.success || !maiContext.context) {
      systemPrompt += `\n\nATTENTION : Aucun contexte sp√©cifique n'a √©t√© trouv√© pour cette question. Dans ce cas, dis UNIQUEMENT "Je n'ai pas cette information". N'essaie pas d'inventer une r√©ponse.`
    }

    systemPrompt += `\n\nR√àGLE ABSOLUE : Si la question n'est pas dans le dataset SAR, r√©ponds UNIQUEMENT "Je n'ai pas cette information". M√™me pour des questions math√©matiques simples comme 1+1, des questions g√©n√©rales, ou toute autre question qui ne concerne pas sp√©cifiquement la SAR, tu dois r√©pondre "Je n'ai pas cette information". Tu ne dois JAMAIS utiliser tes connaissances g√©n√©rales.

R√©ponds de mani√®re professionnelle, formelle et structur√©e, en maintenant un niveau d'excellence correspondant aux standards d'entreprise.`

    const response = await fetch(CLAUDE_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": CLAUDE_API_KEY,
        "anthropic-version": "2023-06-01"
      },
      body: JSON.stringify({
        model: "claude-3-haiku-20240307",
        max_tokens: 1000,
        messages: messages,
        system: systemPrompt
      })
    })

    if (!response.ok) {
      const errorData = await response.json()
      console.error('Erreur Claude API:', errorData)
      
      // Gestion sp√©cifique des erreurs
      let errorMessage = 'Erreur lors de la communication avec Claude'
      let errorDetails = errorData.error?.message || 'Erreur inconnue'
      
      if (errorData.error?.type === 'invalid_request_error') {
        if (errorDetails.includes('credit balance')) {
          errorMessage = 'CREDIT_LOW'
        } else if (errorDetails.includes('model')) {
          errorMessage = 'MODEL_NOT_FOUND'
        }
      } else if (errorData.error?.type === 'not_found_error') {
        errorMessage = 'MODEL_NOT_FOUND'
      }
      
      return NextResponse.json(
        { 
          error: errorMessage,
          details: errorDetails,
          type: errorData.error?.type || 'unknown'
        },
        { status: response.status }
      )
    }

    const data = await response.json()
    
    if (data.content && data.content.length > 0) {
      return NextResponse.json({
        success: true,
        message: data.content[0].text
      })
    } else {
      return NextResponse.json(
        { error: 'Aucune r√©ponse re√ßue de Claude' },
        { status: 500 }
      )
    }

  } catch (error) {
    console.error('Erreur API route chat:', error)
    
    return NextResponse.json(
      { 
        error: 'Erreur interne du serveur',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    )
  }
}
