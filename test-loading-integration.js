#!/usr/bin/env node
/**
 * Script de test pour l'int√©gration des messages de chargement
 */

const fetch = require('node-fetch');

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';

async function testLoadingMessages() {
  console.log('üß™ TEST DE L\'INT√âGRATION DES MESSAGES DE CHARGEMENT');
  console.log('=' * 60);

  const testQuestions = [
    "qui est le dg de la sar",
    "quels sont les produits de la sar",
    "comment fonctionne le processus de raffinage",
    "quelles sont les mesures de s√©curit√©",
    "comment la sar prot√®ge l'environnement"
  ];

  for (const question of testQuestions) {
    console.log(`\nüîç Test pour: "${question}"`);
    
    try {
      // Test 1: Message de chargement contextuel
      console.log('  1. Test message de chargement contextuel...');
      const searchResponse = await fetch(`${API_BASE_URL}/api/mai/loading-message/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          question,
          phase: 'searching'
        })
      });

      if (searchResponse.ok) {
        const searchData = await searchResponse.json();
        console.log(`     ‚úÖ Recherche: ${searchData.message}`);
        console.log(`     üìä Contexte: ${searchData.context}`);
      } else {
        console.log(`     ‚ùå Erreur: ${searchResponse.status}`);
      }

      // Test 2: Message de traitement
      const processResponse = await fetch(`${API_BASE_URL}/api/mai/loading-message/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          question,
          phase: 'processing'
        })
      });

      if (processResponse.ok) {
        const processData = await processResponse.json();
        console.log(`     ‚úÖ Traitement: ${processData.message}`);
      } else {
        console.log(`     ‚ùå Erreur: ${processResponse.status}`);
      }

      // Test 3: Messages progressifs
      console.log('  2. Test messages progressifs...');
      const progressiveResponse = await fetch(`${API_BASE_URL}/api/mai/progressive-loading/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          question,
          duration: 2.0
        })
      });

      if (progressiveResponse.ok) {
        const progressiveData = await progressiveResponse.json();
        console.log(`     ‚úÖ ${progressiveData.message_count} messages g√©n√©r√©s`);
        console.log(`     ‚è±Ô∏è  Dur√©e: ${progressiveData.total_duration}s`);
        progressiveData.messages.slice(0, 3).forEach((msg, index) => {
          console.log(`        ${index + 1}. ${msg.message} (${msg.phase})`);
        });
      } else {
        console.log(`     ‚ùå Erreur: ${progressiveResponse.status}`);
      }

      // Test 4: Message rapide
      console.log('  3. Test message rapide...');
      const quickResponse = await fetch(`${API_BASE_URL}/api/mai/quick-loading/?question=${encodeURIComponent(question)}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (quickResponse.ok) {
        const quickData = await quickResponse.json();
        console.log(`     ‚úÖ Rapide: ${quickData.message}`);
      } else {
        console.log(`     ‚ùå Erreur: ${quickResponse.status}`);
      }

    } catch (error) {
      console.log(`     ‚ùå Erreur de connexion: ${error.message}`);
    }
  }

  console.log('\n' + '=' * 60);
  console.log('üìä R√âSULTATS DU TEST');
  console.log('=' * 60);
  console.log('‚úÖ Tests des messages de chargement termin√©s');
  console.log('üéØ Int√©gration frontend pr√™te pour les tests');
}

// Simulation d'une conversation avec messages de chargement
async function simulateConversation() {
  console.log('\nüí¨ SIMULATION DE CONVERSATION');
  console.log('=' * 60);

  const questions = [
    "qui est le dg de la sar",
    "quels sont les produits de la sar",
    "comment fonctionne le raffinage"
  ];

  for (const question of questions) {
    console.log(`\nüë§ Utilisateur: ${question}`);
    
    try {
      // Phase de recherche
      const searchResponse = await fetch(`${API_BASE_URL}/api/mai/loading-message/`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ question, phase: 'searching' })
      });
      
      if (searchResponse.ok) {
        const searchData = await searchResponse.json();
        console.log(`ü§ñ MA√è: ${searchData.message}`);
        
        // Attendre un peu
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Phase de traitement
        const processResponse = await fetch(`${API_BASE_URL}/api/mai/loading-message/`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ question, phase: 'processing' })
        });
        
        if (processResponse.ok) {
          const processData = await processResponse.json();
          console.log(`ü§ñ MA√è: ${processData.message}`);
        }
        
        // Attendre un peu
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // R√©ponse simul√©e
        console.log(`ü§ñ MA√è: R√©ponse trouv√©e ! (simulation)`);
      }
    } catch (error) {
      console.log(`ü§ñ MA√è: Erreur de connexion - ${error.message}`);
    }
  }
}

async function main() {
  try {
    await testLoadingMessages();
    await simulateConversation();
    console.log('\nüéâ TOUS LES TESTS TERMIN√âS AVEC SUCC√àS !');
  } catch (error) {
    console.error('\n‚ùå ERREUR LORS DES TESTS:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { testLoadingMessages, simulateConversation };

